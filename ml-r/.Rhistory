d[, colSums(is.na(d)) > 0]
colSums(sapply(d, is.na))
d[,1]
d
d[,2]
sum(train[,'YearRemodAdd', with = FALSE] != train[,'YearBuilt', with = FALSE])
sum(train[,'YearRemodAdd'] != train[,'YearBuilt'])
dim(train)
colnames(train)
length(colnames(train))
dim(train)
train %>% select(YearBuilt, YearRemodAdd) %>%    mutate(Remodeled = as.integer(YearBuilt != YearRemodAdd)) %>% ggplot(aes(x= factor(x = Remodeled, labels = c( 'No','Yes')))) + geom_bar() + xlab('Remodeled') + theme_light()
train %>% select(YearBuilt, YearRemodAdd)
train %>% select(YearBuilt, YearRemodAdd)
train$YearBuilt
train %>% select(YearBuilt, YearRemodAdd)
library(dplyr)
train %>% select(YearBuilt, YearRemodAdd) %>%    mutate(Remodeled = as.integer(YearBuilt != YearRemodAdd)) %>% ggplot(aes(x= factor(x = Remodeled, labels = c( 'No','Yes')))) + geom_bar() + xlab('Remodeled') + theme_light()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analyiseData()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
analysisData()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
train[,.SD, .SDcols = cat_var]
train_cat <- train[,.SD, .SDcols = cat_var]
library(data.table)
require(data.table)
library(data.table)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
library(data.table)
train %>% select(YearBuilt, YearRemodAdd) %>%    mutate(Remodeled = as.integer(YearBuilt != YearRemodAdd)) %>% ggplot(aes(x= factor(x = Remodeled, labels = c( 'No','Yes')))) + geom_bar() + xlab('Remodeled') + theme_light()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
library(data.table)
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
train_cat <- train[,.SD, .SDcols = cat_var]
setDT(train)
train_cat <- train[,.SD, .SDcols = cat_var]
train = setDT(train)
head(train)
train_cat <- train[,.SD, .SDcols = cat_var]
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
cat_var
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
cat_var
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
cat_car
numeric_var <- names(train)[which(sapply(train, is.numeric))]
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
test <- fread('../kaggle/house-price/data/test.csv' ,colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
train_cat <- train[,.SD, .SDcols = cat_var]
train_cont <- train[,.SD,.SDcols = numeric_var]
train_cat <- train[,.SD, .SDcols = cat_var]
train_cont <- train[,.SD,.SDcols = numeric_var]
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
sapply(train, is.character)
lapply(train, is.character)
sapply(train, is.character)
s <- sapply(train, is.character)
typeof(s)
colnames(s)
names(s)
help(sapply)
sapply(train, is.character)
which(sapply(train, is.character))
help(which)
which(letters =='R')
lapply(train, is.na)
sapply(train, is.na)
names(sapply(train, is.na))
colnames(sapply(train, is.na))
sapply(train, is.na)
sapply(train, is.na)[1]
sapply(train, is.na)[1,]
sapply(train, is.na)[2
,]
head(train)
s <- sapply(train, is.na)
head(s)
s$Id
typeof(s)
s[1]
s[,1]
nrow(train)
d <- data.frame(a=c(1,2,3), b=(4,5,6))
d <- data.frame(a=c(1,2,3), b=c(4,5,6))
d
sapply(d, is.na)
colSums(sapply(d, is.na))
colSums(d)
which(b)
which(d)
which(sapply(d, is.na))
which(sapply(d, !is.na))
which(sapply(d, is.numeric))
d
which(sapply(d, is.character))
which(sapply(d, is.integer))
which(sapply(d, is.numeric))
c(d, a)
d
c(d, "a")
sapply(train, is.character)
which(sapply(train, is.character))
names(train)
names(which(sapply(train, is.character)))
names(train)[0]
names(train)[1]
names(train)[]
names(train)[2]
which(sapply(train, is.character))
names(train)[c(1,2)]
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
cat_var
cat_car
d
d[,1]
d[,print(.SD), by=a]
typeof(train)
colnames(train)
typeof(train)
train$Id
help(fread)
colnames(train)
names(train)
typeof(train)
train <- read.csv(file="../titanic/data/train.csv",head=TRUE,sep=",")
typeof(train)
colnames(train)
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
cat_var
train[, print(.SD), by = ID]
train[, print(.SD), by = Id]
l <- list(rep(1:12))
l
l <- list(rep(1:12), rep(13:24))
l
names(l)
length(l)
l[1]
l[,1]
l
l <- list(a=rep(1:12), b=rep(13:24))
l
l$a
l <- list(a=rep(1:12), b=rep(13:24), a=rep(3,33))
l
l[, print(.SD), by='a']
l <- list(a=rep(1:12), b=rep(13:24), a=rep(1:12))
l[, print(.SD), by='a']
DT = data.table(ID = c("b","b","b","a","a","c"), a = 1:6, b = 7:12, c = 13:18)
DT
flights <- fread("data/flights14.csv")
head(flights)
str(flights)
flights[origin == "JFK" & month == 6L]
flights[1:2]
flights[, arr_delay]
flights[, list(arr_delay)]
flights[, arr_delay]
flights[, .(arr_delay, dep_delay)]
flights[ .(arr_delay, dep_delay)]
flights[ , (arr_delay, dep_delay)]
flights[ , .(arr_delay, dep_delay)]
flight[origin =='JFK']
flights[origin =='JFK']
flights[origin]
flights$flight
flights$origin
flights[, origin]
flights[, .(origin)]
flights[, .(delay_arr = arr_delay, delay_dep = dep_delay)]
flights[, sum((arr_delay + dep_delay) < 0)]
flights[origin == "JFK" & month == 6L, .(m_arr = mean(arr_delay), m_dep = mean(dep_delay))]
flights[, c("arr_delay", "dep_delay"), with = FALSE]
flights[, c("arr_delay", "dep_delay"), with = TRUE]
flights[, .(.N), by = .(origin)]
flights[, .N]
length(filghts)
length(flights)
nrow(flights)
flights[, .(.N), by = "origin"]
flights[carrier == "AA", .(mean(arr_delay), mean(dep_delay)), by = .(origin, dest, month)]
DT
DT[, print(.SD), by = ID]
train[,.SD, .SDcols = cat_var]
flights[, .(.N), by = "origin"]
sapply(flights, is.na)
colSums(sapply(flights, is.na))
is.na(train)
is.na(flights)
sum(is.na(flights))
sum(is.na(train))
sapply(train, is.character)
sapply(flights, is.character)
which(sapply(flights, is.character))
names(flights)[which(sapply(flights, is.character)))
names(flights)[which(sapply(flights, is.character))]
names(flights)[1,2,3]
names(flights)[c(1,2,3)]
names(flights)
flights[carrier == "AA",lapply(.SD, mean),      by = .(origin, dest, month),    .SDcols = c("arr_delay", "dep_delay")]
flights[carrier == "AA",lapply(.SD, mean),      by = .(origin, dest, month)]
flights[carrier == "AA",lapply(.SD, mean),      by = .(origin, dest, month)]
flights[carrier == "AA",lapply(.SD, mean),      by = .(origin, dest, month),    .SDcols = c("arr_delay", "dep_delay")]
flights[carrier == "AA",lapply(.SD, mean),      by = .(origin, dest, month),    .SDcols = c("arr_delay")]
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
doPlots(train_cat, fun = plotHist, ii  = 4:8, ncol = 2)
doPlots(train_cat, fun = plotHist, ii = 8:12, ncol = 2)
doPlots(train_cat, fun = plotHist, ii = 13:18, ncol = 2)
doPlots(train_cat, fun = plotHist, ii = 18:22, ncol = 2)
train %>% select(LandSlope, Neighborhood, SalePrice) %>%
filter(LandSlope == c('Sev', 'Mod')) %>% arrange(Neighborhood) %>%
group_by(Neighborhood, LandSlope) %>% summarize(Count = n()) %>%
ggplot(aes(Neighborhood, Count)) + geom_bar(aes(fill = LandSlope), position = 'dodge', stat = 'identity') + theme_light() +theme(axis.text.x = element_text(angle = 90, hjust =1))
train %>% select(Neighborhood, SalePrice) %>%
ggplot(aes(factor(Neighborhood), SalePrice)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust =1)) +
xlab('Neighborhoods')
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
train[,colSums(is.na(train)) > 0]
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
flights[, !c("arr_delay", "dep_delay"), with = FALSE]
flights[, !c("arr_delay", "dep_delay")]
flights[, year:day, with = FALSE]
flights[, year:day]
train[,colSums(is.na(train)) > 0]
train[,colSums(is.na(train)) > 0, with=FALSE]
train[,colSums(is.na(train)) > 0, with=FALSE]
train[,colSums(is.na(train)) > 0, with=FALSE]
temp_df <- as.data.frame(ifelse(is.na(train), 0, 1))
temp_df <- temp_df[,order(colSums(temp_df))]
temp_df
plot_Missing(train[,colSums(is.na(train)) > 0, with=FALSE])
plot_Missing(train)
plot_Missing(train[,colSums(is.na(train)) > 0, with=FALSE])
train[, colSums(is.na(train))>0]
train
train[, colSums(is.na(train))>0]
train[,]
train[, colSums(is.na(train))>0]
is.na(train)
is.na(train) > 0
colSums(is.na(train))
d <- train[, colSums(is.na(train))>0]
temp_df <- as.data.frame(ifelse(is.na(d),0,1))
temp_df
temp_df[,order(colSums(temp_df))]
data_temp <- expand.grid(list(x = 1:nrow(temp_df), y = colnames(temp_df)))
data_temp$m <- as.vector(as.matrix(temp_df))
data_temp <- data.frame(x = unlist(data_temp$x), y = unlist(data_temp$y), m = unlist(data_temp$m))
ggplot(data_temp) + geom_tile(aes(x=x, y=y, fill=factor(m))) + scale_fill_manual(values=c("white", "black"), name="Missing\n(0=Yes, 1=No)") + theme_light() + ylab("") + xlab("") + ggtitle(title)
doPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
doPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)
analysisData()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
train_cont <- train[,.SD,.SDcols = numeric_var]
plot_Missing(train[,colSums(is.na(train)) > 0, with=FALSE])
analysisData()
colSums(sapply(train, is.na)); # show NA count for each column
cat('Train has', dim(train)[1], 'rows and', dim(train)[2], 'columns.\n')
cat('Test has', dim(test)[1], 'rows and', dim(test)[2], ' columns.\n')
sum(is.na(train)) / (nrow(train) *ncol(train))
sum(is.na(test)) / (nrow(test) * ncol(test))
cat("The number of duplicated rows are", nrow(train) - nrow(unique(train)))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
cat_var
names(train)[which(sapply(train, is.character))]
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
sapply(train, is.character)
which(sapply(train, is.character))
head(train)
colSums(sapply(train, is.na)); # show NA count for each column
cat("The number of duplicated rows are", nrow(train) - nrow(unique(train)))
cat('Train has', dim(train)[1], 'rows and', dim(train)[2], 'columns.\n')
cat('Test has', dim(test)[1], 'rows and', dim(test)[2], ' columns.\n')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
colSums(sapply(train, is.na)); # show NA count for each column
cat('Train has', dim(train)[1], 'rows and', dim(train)[2], 'columns.\n')
cat('Test has', dim(test)[1], 'rows and', dim(test)[2], ' columns.\n')
sum(is.na(train)) / (nrow(train) *ncol(train))
sum(is.na(test)) / (nrow(test) * ncol(test))
cat("The number of duplicated rows are", nrow(train) - nrow(unique(train)))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
train_cat <- train[,.SD, .SDcols = cat_var]
train_cont <- train[,.SD,.SDcols = numeric_var]
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
doPlots(train_cat, fun = plotHist, ii  = 4:8, ncol = 2)
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
cat_var
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
train_cat <- train[,.SD, .SDcols = cat_var]
train_cont <- train[,.SD,.SDcols = numeric_var]
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
train_cat <- train[,.SD, .SDcols = cat_var]
numeric_var <- names(train)[which(sapply(train, is.numeric))]
train_cont <- train[,.SD,.SDcols = numeric_var]
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
doPlots(train_cat, fun = plotHist, ii  = 4:8, ncol = 2)
colSums(sapply(train, is.na)); # show NA count for each column
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
colSums(sapply(train, is.na)); # show NA count for each column
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
colSums(sapply(train, is.na)); # show NA count for each column
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
train_cat <- train[,.SD, .SDcols = cat_var]
numeric_var <- names(train)[which(sapply(train, is.numeric))]
train_cont <- train[,.SD,.SDcols = numeric_var]
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
train <- fread('../kaggle/house-price/data/train.csv',colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
test <- fread('../kaggle/house-price/data/test.csv' ,colClasses=c('MiscFeature' = "character", 'PoolQC' = 'character', 'Alley' = 'character'))
colSums(sapply(train, is.na)); # show NA count for each column
cat('Train has', dim(train)[1], 'rows and', dim(train)[2], 'columns.\n')
cat('Test has', dim(test)[1], 'rows and', dim(test)[2], ' columns.\n')
sum(is.na(train)) / (nrow(train) *ncol(train))
sum(is.na(test)) / (nrow(test) * ncol(test))
cat("The number of duplicated rows are", nrow(train) - nrow(unique(train)))
cat_var <- names(train)[which(sapply(train, is.character))]
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
train_cat <- train[,.SD, .SDcols = cat_var]
numeric_var <- names(train)[which(sapply(train, is.numeric))]
train_cont <- train[,.SD,.SDcols = numeric_var]
doPlots(train_cat, fun = plotHist, ii = 1:4, ncol = 2)
doPlots(train_cat, fun = plotHist, ii  = 4:8, ncol = 2)
doPlots(train_cat, fun = plotHist, ii = 8:12, ncol = 2)
doPlots(train_cat, fun = plotHist, ii = 13:18, ncol = 2)
doPlots(train_cat, fun = plotHist, ii = 18:22, ncol = 2)
train %>% select(LandSlope, Neighborhood, SalePrice) %>%
filter(LandSlope == c('Sev', 'Mod')) %>% arrange(Neighborhood) %>%
group_by(Neighborhood, LandSlope) %>% summarize(Count = n()) %>%
ggplot(aes(Neighborhood, Count)) + geom_bar(aes(fill = LandSlope), position = 'dodge', stat = 'identity') + theme_light() +theme(axis.text.x = element_text(angle = 90, hjust =1))
train %>% select(Neighborhood, SalePrice) %>%
ggplot(aes(factor(Neighborhood), SalePrice)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust =1)) +
xlab('Neighborhoods')
doPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)
names(train_cat)
train_cat[[1]]
data.frame(train_cat[[1]])
d <- data.frame(train_cat[[1]])
head(d)
head(train_cat[[1]])
d <- data.frame(x=train_cat[[1]])
d
head(d)
colnames(train_cat)
colnames(train_cat)[1]
plotHist(train_cat, 1)
data
head(data)
ggplot(data=train_cat[[1]]) + geom_point()
ggplot(data=data.frame(x=train_cat[[1]]), aes(x=factor(x))) + geom_point()
ggplot(data=data.frame(x=train_cat[[1]]), aes(x=factor(x))) + +stat_count()
data <- data.frame(x=train_cat[[i]])
data <- data.frame(x=train_cat[[1]])
ggplot(data=data, aes(x=factor(x))) + stat_count()
ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(data_in)[i]) + theme_light()
ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(train_cat)[i]) + theme_light()
ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(train_cat)[1]) + theme_light()
ggplot(data=data, aes(x=factor(x))) + stat_count() + xlab(colnames(train_cat)[1])
ggplot(data=data, aes(x=factor(x))) + stat_count()
ggplot(data=data, aes(x=factor(x)))
help(stat_count)
nrow(data)
ggplot(data=data, aes(x=factor(x))) + stat_count()
names(data)
head(data)
flights[, .(.N), by = .(origin)]
data[, .(.N), by=.(x)]
as.data.table(data)[, .(.N), by=.(x)]
doPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)
train_cont
doPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)
library(e1071)
install.packages('e1071')
library(e1071)
doPlots(train_cont, fun = plotDen, ii = 2:6, ncol = 2)
doPlots(train_cont, fun = plotDen, ii = 7:12, ncol = 2)
doPlots(train_cont, fun = plotDen, ii = 13:17, ncol = 2)
doPlots(train_cont, fun = plotHist, ii = 18:23, ncol = 2)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analysisData()
exploreCorrelation(train_cont);
install.packages('corrplot')
exploreCorrelation(train_cont);
library(corrplot)
exploreCorrelation(train_cont);
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
str(train)
train[, colSums(is.na(train))>0]
train[, colSums(is.na(train))>0, with=false]
train[, colSums(is.na(train))>0, with=FALSE]
train[, colSums(is.na(train))>0]
train
train[, colSums(is.na(train))>0]
train[, colSums(is.na(train))>0, with=FALSE]
head(train)
colnames(train)
train[,colSums(is.na(train)>0)]
iris
colnames(iris)
head(iris)
nrow(iris)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
str(train)
train[, colNames(is.na(train))>0]
train[, colSums(is.na(train))>0]
d <- train[, colSums(is.na(train))>0]
temp_df <- as.data.frame(ifelse(is.na(d), 0,1))
temp_df
temp_df[, order(colSums(temp_df))]
colSums(temp_df)
order(colSums(temp_df))
plot_Missing(d)
d
d <- train[, is_na(train) > 0, with=FALSE]
d <- train[, colSums(is_na(train)) > 0, with=FALSE]
d <- train[, colSums(is.na(train)) > 0, with=FALSE]
plot_Missing(d)
d <- train[, colSums(is.na(train)) > 0, with=TRUE]
plot_Missing(d)
temp_df <- as.data.frame(ifelse(is.na(d), 0,1))
temp_df
order(colSums(temp_df))
d <- train[, colSums(is.na(train)) > 0, with=FALSE]
temp_df <- as.data.frame(ifelse(is.na(d), 0,1))
order(colSums(temp_df))
temp_df
d <- train[, colSums(is.na(train)) > 0, with=TRUE]
as.data.frame(ifelse(is.na(d), 0,1))
d <- train[, colSums(is.na(train)) > 0, with=FALSE]
as.data.frame(ifelse(is.na(d), 0,1))
temp_df <- as.data.frame(ifelse(is.na(d), 0,1))
temp_df
colSums(temp_df)
order(colSums(temp_df))
colSums(temp_df)
temp_df
temp_df <- temp_df[,order(colSums(temp_df))]
temp_df
data_temp <- expand.grid(list(x = 1:nrow(temp_df), y = colnames(temp_df)))
data_temp
names(data_temp)
head(data_temp)
colnames(temp_df)
temp_df
as.atrix(temp_df)
as.matrix(temp_df)
