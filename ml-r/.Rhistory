prop.table(table(data$Survived),1)
table(data$Sex, data$Survived)
prop.table(table(data$Sex, data$Survived),1)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=data,
method="class")
fancyRpartPlot(fit)
install.packages('rpart.plot')
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
data <- read.csv("../titanic/data/train.csv")
summary(data)
summary(data$Sex)
str(data)
prop.table(table(data$Survived))
table(data$Survived)
prop.table(table(data$Survived),1)
table(data$Sex, data$Survived)
prop.table(table(data$Sex, data$Survived),1)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=data,
method="class")
fancyRpartPlot(fit)
install.packages('rattle')
install.packages("RGtk2")
install.packages('rattle')
install.packages("RGtk2")
install.packages("RGtk2")
>>>>>>> c15f6b81b58d7fb2346b9195d6474c7e851d0141
library(rpart)
library(rattle)
train <- read.csv(file="../titanic/data/train.csv",head=TRUE,sep=",")
head(train)
str(train)
table(train$Survived)
prop.table(table(train$Survived))
str(train)
train$Survived
table(train$Survived)
nrow(train)
str(train)
source('~/dev/ml/ml/ml-r/titanic.R', echo=TRUE)
install.packages("rattle")
test$Survived <- rep(0, 418)
test <- read>csv(file="../titanic/data/test.csv")
test <- read.csv(file="../titanic/data/test.csv")
head(test)
nrow(test)
table(test$Survived)
str(test)
test$Survived <- rep(0, 418)
write.csv(submit, file = "/tmp/theyallperish.csv", row.names = FALSE)
write.csv(test, file = "/tmp/theyallperish.csv", row.names = FALSE)
write.csv(test, file = "~/tmp/theyallperish.csv", row.names = FALSE)
summary(train$Survived)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(sumit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(sumit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
write.csv(submit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
summary(test$Sex)
table(test$Sex)
prop.table(summary(test$Sex))
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived),1)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
library(rattle)
install.packages('rpart.plot')
library(RColorBrewer)
fancyRpartPlot(fit)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived),1)
prop.table(table(train$Age, train$Survived), 1)
test$Survived[test$Sex == 'female'] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
summary(train$Age)
aggregate(Survived ~ Age + Sex, data = train, FUN=sum)
test$Child <- 0
test$Child[test$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data=test, FUN=sum)
train$Fare2 <- '30+'
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'
train$Fare2[train$Fare < 10] <- '<10'
aggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
test <- read.csv(file="../titanic/data/test.csv")
Predition <- predict(fit, test, type = "class")
fancyRpartPlot(Predition)
str(Predition)
head(Predition)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Predition)
write.csv(submit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(Predition)
Predition <- predict(fit, test, type = "class")
fancyRpartPlot(Predition)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
Predition <- predict(fit, test, type = "class")
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
Predition <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Predition)
write.csv(submit, file = "~/tmp/theyallperish.csv", row.names = FALSE)
train <- read.csv(file="../titanic/data/train.csv",head=TRUE,sep=",")
test <- read.csv(file="../titanic/data/test.csv")
test$Survived <- NA
combi <- rbind(train, test)
head(combi)
combi[Survived = NA]
library('ggplot2')
weather <- read.csv("./data/Beijing_2016_HourlyPM25_created20170201.csv", header = TRUE)
weather <- weather[-c(1)]
weather <- weather[-(1:2),]
colnames(weather) <- as.character(unlist(weather[1,]))
weather <- weather[-(1),]
weather <- transform(weather, D = paste(weather$Year,weather$Day, weather$Hour))
head(weather)
ggplot(weather, aes(Value, Year)) + geom_area()
source('~/dev/ml/ml/ml-r/decision-tree.r', echo=TRUE)
source('~/dev/ml/ml/ml-r/decision-tree.r', echo=TRUE)
source('~/dev/ml/ml/ml-r/decision-tree.r', echo=TRUE)
head(kyphosis)
library(gam)
install.packages('library(gam)')
install.packages('gam')
library(gam)
library(gam)
head(kyphosis)
source('~/dev/ml/ml/ml-r/decision-tree-kyphosis.R', echo=TRUE)
source('~/dev/ml/ml/ml-r/decision-tree-kyphosis.R', echo=TRUE)
names(kyphosis)
head(kyphosis)
head(fit)
printcp(fit)
summary(fit)
plotcp(fit)
plot(fit)
text(fit)
source('~/dev/ml/ml/ml-r/decision-tree-kyphosis.R', echo=TRUE)
nrow(kyphosis)
source('~/dev/ml/ml/ml-r/decision-tree-kyphosis.R', echo=TRUE)
source('~/dev/ml/ml/ml-r/decision-tree-kyphosis.R', echo=TRUE)
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
plot(pfit, uniform=TRUE,
main="Pruned Classification Tree for Kyphosis")
Kyphosis ~ Age + Number + Start,
method="class", data=kyphosis
fit <- rpart(Kyphosis ~ Age + Number + Start,
method="class", data=kyphosis)
printcp(fit)
colnames(kyphosis)
pred <- predict(fit, kyphosis, type='class')
pred
plot(pred)
conf <- table(kyphosis$Kyphosis, pred)
print(sum(diag(conf)) / sum(conf))
library(RGtk2)
library(rattle)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
data <- read.csv("../titanic/data/train.csv")
summary(data)
colnames(data)
cor(c(data$"ptitanic", data$"car90"))
cor(data[c("ptitanic", "car90")])
cor(data[c("ptitanic", "Fare")])
cor(data[c("Ticket", "Fare")])
data[c("Ticket", "Fare")]
data[c( "Fare", "Ticket")]
cor(data[c( "Fare", "Ticket")])
data[c( "Fare", "Ticket")]
names(data)
data[c( "Fare", "Age")]
data[c( "Fare", "Age")]
cor(data[c( "Fare", "Age")])
source('~/dev/ml/ml/ml-r/decision-tree.r', echo=TRUE)
source('~/dev/ml/ml/ml-r/decision-tree.r', echo=TRUE)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv(file="../titanic/data/train.csv",head=TRUE,sep=",")
fit <- rpart(Survived ~ Sex, data=train, method="class")
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
source('~/dev/ml/ml/ml-r/titanic.R', echo=TRUE)
train$Name[1]
train <- read.csv(file="../titanic/data/train.csv",head=TRUE,sep=",")
test <- read.csv(file="../titanic/data/test.csv",head=TRUE,sep=",")
str(train)
table(train$Survived)
prop.table(table(train$Survived))
test$Survived <- rep(0, 418)
colnames(test)
train$Name[1]
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split='[,.]')
strsplit(combi$Name[1], split='[,.]')[[1]]
strsplit(combi$Name[1], split='[,.]')[[1]][2]
combi$Title <- strsplit(combi$Name, split='[,.]')[[1]][2]  # Won't work!
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train, method="class")
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "/tmp/engineeredfeaturestree.csv", row.names = FALSE)
table(train$Sex)
prop.table(table(train$Sex))
prop.table(table(train$Survived,train$Sex))
prop.table(table(train$Survived,train$Sex),1)
prop.table(table(train$Sex, train$Survived),1)
table(train$Sex, train$Survived)
table(train$Sex, train$Sex)
table(train$Survived, train$Sex)
t <- rpart()
help(rpart)
t <- rpart(Survived ~ Age, train)
t
fancyRpartPlot(t)
colnames(train)
t <- rpart(Survived ~ Age + Pclass + Sex + Ticket + Cabin, train)
fancyRpartPlot(t)
t <- rpart(Survived ~ Age + Pclass + Sex + Ticket + Cabin, train, method="class")
fancyRpartPlot(t)
t <- rpart(Survived ~ Age + Pclass + Sex, train, method="class")
fancyRpartPlot(t)
t <- rpart(Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare+ Embarked, train, method="class")
fancyRpartPlot(t)
predict(t, test, type="class")
p <- predict(t, test, type="class")
colnames(c)
colnames(p)
length(p)
head(p)
names(p)
test$PassengerId
p
names(train)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(xxplot)
if(!require('xxplot')){
install.packages('xxplot')
}
library(xxplot)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
install.packages('xxplot')
install.packages('xyplot')
library(xyplot)
library(lattice)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
alli.mod1 = lm(lnWeight ~ lnLength, data = alligator)
summary(alli.mod1)
qqmath( ~ resid(alli.mod1),
xlab = "Theoretical Quantiles",
ylab = "Residuals"
)
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
print(summary(relation))
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
plot(y,x,col = "blue",main = "Height & Weight Regression",
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
source('~/dev/ml/ml/ml-r/SimpleLinearRegression.R', echo=TRUE)
print(summary(relation))
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
plot(y,x,col = "blue",main = "Height & Weight Regression",
cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read.csv(file="./data/train.csv",head=TRUE,sep=",")
test <- read.csv(file="./data/test.csv",head=TRUE,sep=",")
train <- read.csv(file="data/train.csv",head=TRUE,sep=",")
train <- read.csv(file="../kaggle/house-price/data/train.csv",head=TRUE,sep=",")
test <- read.csv(file="../kaggle/house-price/data/test.csv",head=TRUE,sep=",")
head(train)
relation <- lm(train$SalePrice~train$LotArea)
relation <- lm(train$SalePrice~train$LotArea)
result <- predict(relation, test)
test$LotArea
result <- predict(relation, data.frame(LotArea=9000))
summary(relation)
train$SalePrice
l <- train$SalePrice
length(l)
names(l)
x <- train$LotArea
y <- train$SalePrice
relation <- lm(y~x)
result <- predict(relation, data.frame(LotArea=9000))
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
print(summary(relation))
result <-  predict(relation,a)
result <- predict(relation, data.frame(LotArea=9000))
result <- predict(relation, data.frame(x=9000))
a <- data.frame(x = 170)
a
d <- data.frame(x=test$LotArea)
d
colnames(d)
result <- predict(relation, data.frame(x=test$LotArea))
plot(y, x, abline(lm(x~y)))
str(result)
result
head(result)
predict(relation, data.frame(x=c(170,171)))
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
linearRegression()
linearRegression()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
summary(result)
str(result)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
head(result)
head(result)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
str(result)
summary(result)
result
source('~/dev/ml/ml/ml-r/SimpleLinearRegression.R', echo=TRUE)
print(result)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
print(result)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
nrow(result)
length(result)
nrow(test)
test$Id
r <- data.frame(Id = test$Id, SalePrice = result)
head(r)
write.csv(r, file="~/tmp/house-price.csv")
write.csv(r, file="~/tmp/house-price.csv", row.names = FALSE)
r <- data.frame(Id = test$Id, SalePrice = result)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
plot(train$LotArea, train$SalePrice, abline(lm(SalePrice ~ LotArea, data=train)))
plot(train$SalePrice, train$LotArea, abline(lm(SalePrice ~ LotArea, data=train)))
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
plot(train$MSSubClass, train$SalePrice)
plot(train$Fence, train$SalePrice)
plot(train$LotFrontage, train$SalePrice)
str(train)
library(ggplot2)
ggplot(train, aes(x=OpenPorchSF, y=SalePrice)) + geom_point()
ggplot(train, aes(x=factor(OpenPorchSF), y=SalePrice)) + geom_point()
ggplot(train, aes(x=(OpenPorchSF), y=SalePrice)) + geom_point()
ggplot(train, aes(x=(OpenPorchSF), y=SalePrice)) + geom_point() + geom_smooth()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
lm(SalePrice ~ ., data=train)
colnames(train)
result <- predict(relation, test)
relation <- lm(SalePrice ~ LotArea + MSSubClass, data = train)
result <- predict(relation, test)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
ggplot(train, aes(x=(OpenPorchSF), y=SalePrice)) + geom_point()
result <- linearRegression()
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+Alley, data = train)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street, data = train)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+Alley, data = train)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape, data = train)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape+LandContour+Utilities+LotConfig+LandSlope+Neighborhood, data = train)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape+LandContour+Utilities+LotConfig+LandSlope, data = train)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape+LandContour+Utilities+LotConfig, data = train)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape+LandContour+Utilities, data = train)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape+LandContour, data = train)
ggplot(train, aes(x=Utilities, y=SalePrice)) + geom_point()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
lm(SalePrice ~ LotArea + MSSubClass + LotFrontage + LotArea+Street+LotShape+LandContour+Utilities, data = train)
str(train)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
analyiseData()
train$Street
table(train$Street)
train$paved[train$Street=='Pave'] <- 1
ggplot(train, aes(x=Street, y=SalePrice)) + geom_point()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
ggplot(train, aes(x=Utilities, y=SalePrice)) + geom_point()
colnames(train)
ggplot(train, aes(x=MSSubClass, y=SalePrice)) + geom_point()
ggplot(train, aes(x=LotArea, y=SalePrice)) + geom_point()
ggplot(train, aes(x=LotArea, y=SalePrice)) + geom_point() + geom_line()
linearRegression()
linearRegression()
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
source('~/dev/ml/ml/kaggle/house-price/house-price.R', echo=TRUE)
